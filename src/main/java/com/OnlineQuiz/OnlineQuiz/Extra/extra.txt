import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class QuizService {
    
    @Autowired
    private quizRepository quizRepository;

    @Transactional
    public Quiz createQuiz(QuizRequestDTO quizDTO) {
        Quiz quiz = new Quiz();
        quiz.setTitle(quizDTO.getTitle());

        // ✅ Automatically fetch the logged-in user's username
        String loggedInUser = getLoggedInUsername();
        quiz.setUserName(loggedInUser); // ✅ Assign username from JWT token

        quiz = quizRepository.save(quiz);
        return quiz;
    }

    // ✅ Helper method to get the logged-in username
    private String getLoggedInUsername() {
        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        if (principal instanceof UserDetails) {
            return ((UserDetails) principal).getUsername(); // ✅ Get username from Spring Security
        } else {
            return principal.toString();
        }
    }
}






//Web socket java script
// Create a new WebSocket connection
var socket = new SockJS('/quiz-websocket');
var stompClient = Stomp.over(socket);

// Connect to WebSocket server
stompClient.connect({}, function (frame) {
    console.log('Connected: ' + frame);

    // Subscribe to the quiz topic for a specific room
    stompClient.subscribe('/topic/quiz/{roomCode}', function (response) {
        // Handle the response from the server (quiz data)
        var quizData = JSON.parse(response.body);
        console.log(quizData);
        // Update the UI with quiz questions and options
    });
});

// Send a message to start the quiz (when the creator clicks the "Send" button)
function sendQuizToParticipants(roomCode) {
    fetch('/send', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ roomCode: roomCode })
    })
    .then(response => response.json())
    .then(data => {
        console.log(data.message);
    });
}

